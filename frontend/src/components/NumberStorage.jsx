import { useState } from 'react'
import { useFHEVM } from '../hooks/useFHEVM'
import { useNumberStorage } from '../hooks/useContracts'
import { useAccount } from 'wagmi'

const NumberStorage = () => {
  const { instance } = useFHEVM()
  const { address } = useAccount()
  const {
    contractAddress,
    storeNumber,
    isStoring,
    storeData,
    storedNumber,
    isGettingStored,
    getStoredError
  } = useNumberStorage()

  const [number, setNumber] = useState('')
  const [isEncrypting, setIsEncrypting] = useState(false)
  const [encryptedData, setEncryptedData] = useState(null)

  const handleEncryptNumber = async () => {
    if (!instance || !number || !address) {
      alert('шп╖чбоф┐ЭщТ▒хМЕх╖▓ш┐ЮцОеф╕Фш╛УхЕеф║ЖцХ░хнЧ')
      return
    }

    setIsEncrypting(true)
    try {
      // хИЫх╗║хКахпЖш╛УхЕе
      const input = instance.createEncryptedInput(contractAddress, address)
      input.add32(parseInt(number))

      const encryptedInput = await input.encrypt()

      setEncryptedData({
        handle: encryptedInput.handles[0],
        inputProof: encryptedInput.inputProof
      })

      console.log('хКахпЖцИРхКЯ:', encryptedInput)
    } catch (error) {
      console.error('хКахпЖхд▒ш┤е:', error)
      alert('хКахпЖхд▒ш┤е: ' + error.message)
    } finally {
      setIsEncrypting(false)
    }
  }

  const handleStoreNumber = async () => {
    if (!encryptedData) {
      alert('шп╖хЕИхКахпЖцХ░хнЧ')
      return
    }

    try {
      // ш░ГчФихРИч║жхнШхВихКахпЖцХ░хнЧ
      storeNumber({
        args: [encryptedData.handle, encryptedData.inputProof]
      })
    } catch (error) {
      console.error('хнШхВихд▒ш┤е:', error)
      alert('хнШхВихд▒ш┤е: ' + error.message)
    }
  }

  return (
    <div style={{ padding: '20px', border: '1px solid #ddd', borderRadius: '8px', margin: '20px 0' }}>
      <h3>цнещкд2: цХ░хнЧхКахпЖхнШхВи</h3>

      <div style={{ marginBottom: '20px' }}>
        <h4>хнжф╣ачЫоцаЗя╝Ъ</h4>
        <ul>
          <li>хнжф╣ахжВф╜ХхКахпЖчФицИ╖ш╛УхЕечЪДцХ░хнЧ</li>
          <li>ф║ЖшзгхКахпЖцХ░цНочЪДч╗УцЮД</li>
          <li>х░ЖхКахпЖцХ░цНохнШхВихИ░хМ║хЭЧщУ╛</li>
        </ul>
      </div>

      <div style={{ marginBottom: '20px' }}>
        <h4>ш╛УхЕешжБхКахпЖчЪДцХ░хнЧя╝Ъ</h4>
        <input
          type="number"
          value={number}
          onChange={(e) => setNumber(e.target.value)}
          placeholder="ш╛УхЕеф╕Аф╕к32ф╜НцХ┤цХ░"
          style={{
            width: '200px',
            padding: '8px',
            margin: '10px 0',
            border: '1px solid #ccc',
            borderRadius: '4px'
          }}
        />
      </div>

      <div style={{ marginBottom: '20px' }}>
        <button
          onClick={handleEncryptNumber}
          disabled={!instance || !number || isEncrypting}
          style={{
            padding: '10px 20px',
            backgroundColor: '#2196F3',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            marginRight: '10px'
          }}
        >
          {isEncrypting ? 'хКахпЖф╕н...' : 'хКахпЖцХ░хнЧ'}
        </button>

        {encryptedData && (
          <button
            onClick={handleStoreNumber}
            style={{
              padding: '10px 20px',
              backgroundColor: '#4CAF50',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer'
            }}
          >
            хнШхВихИ░хМ║хЭЧщУ╛
          </button>
        )}
      </div>

      {encryptedData && (
        <div style={{ marginTop: '20px', padding: '15px', backgroundColor: '#f0f8ff', borderRadius: '4px' }}>
          <h4>тЬЕ хКахпЖцИРхКЯя╝Б</h4>
          <p><strong>хОЯхзЛцХ░хнЧ:</strong> {number}</p>
          <p><strong>хКахпЖхПецЯД:</strong></p>
          <code style={{ fontSize: '12px', wordBreak: 'break-all' }}>
            {encryptedData.handle}
          </code>
          <p style={{ marginTop: '10px', fontSize: '14px', color: '#666' }}>
            ЁЯУЭ хКахпЖхПецЯДцШпхКахпЖцХ░цНочЪДхФпф╕АцаЗшпЖчмжя╝МчФиф║ОхЬицЩ║шГ╜хРИч║жф╕нх╝ХчФиш┐Щф╕кхКахпЖчЪДцХ░хнЧуАВ
          </p>
        </div>
      )}

      {storeData && (
        <div style={{ marginTop: '20px', padding: '15px', backgroundColor: '#e8f5e8', borderRadius: '4px' }}>
          <h4>тЬЕ хнШхВицИРхКЯя╝Б</h4>
          <p><strong>ф║дцШУхУИх╕М:</strong> {storeData.hash}</p>
          <p><strong>хРИч║жхЬ░хЭА:</strong> {contractAddress}</p>
          <p style={{ fontSize: '14px', color: '#666' }}>
            ф╜ачЪДхКахпЖцХ░хнЧх╖▓хоЙхЕихнШхВихЬихМ║хЭЧщУ╛ф╕Кя╝Б
          </p>
        </div>
      )}

      {storedNumber && (
        <div style={{ marginTop: '20px', padding: '15px', backgroundColor: '#f0f8ff', borderRadius: '4px' }}>
          <h4>ЁЯУЦ х╖▓хнШхВичЪДцХ░хнЧ</h4>
          <p><strong>хпЖцЦЗхПецЯД:</strong></p>
          <code style={{ fontSize: '12px', wordBreak: 'break-all' }}>
            {storedNumber}
          </code>
          <p style={{ fontSize: '14px', color: '#666', marginTop: '10px' }}>
            ш┐ЩцШпф╜ахнШхВихЬихРИч║жф╕нчЪДхКахпЖцХ░хнЧчЪДхПецЯД
          </p>
        </div>
      )}

      <div style={{ marginTop: '20px', fontSize: '14px', color: '#666' }}>
        <h5>цКАцЬпшп┤цШОя╝Ъ</h5>
        <ul>
          <li><strong>euint32:</strong> 32ф╜НхКахпЖцЧачмжхП╖цХ┤цХ░ч▒╗хЮЛ</li>
          <li><strong>хКахпЖхПецЯД:</strong> цМЗхРСхМ║хЭЧщУ╛ф╕КхКахпЖцХ░цНочЪДх╝ХчФи</li>
          <li><strong>ш╛УхЕешпБцШО:</strong> шпБцШОхКахпЖцХ░цНочЪДцЬЙцХИцАз</li>
        </ul>
      </div>
    </div>
  )
}

export default NumberStorage